{"version":3,"sources":["components/NavBar/index.js","components/Wrapper/index.js","components/Form/index.js","components/Results/index.js","utils/API.js","pages/Search.js","pages/Saved.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","react_default","a","createElement","className","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","react_router_dom","to","Wrapper","props","Object","assign","Form","onChange","handleInputChange","value","search","name","placeholder","onClick","handleFormSubmit","Results","books","map","book","key","_id","googleId","title","src","image","alt","authors","description","href","link","target","rel","buttonType","buttonAction","buttonText","API","getBooks","query","axios","get","concat","deleteBook","delete","then","result","data","saveBook","bookData","post","savedBooks","booksresults","googleApiResults","bookArray","formattedBook","volumeInfo","imageLinks","thumbnail","canonicalVolumeLink","push","Search","state","results","error","event","chosenBook","_this","find","newSave","console","log","setState","defineProperty","preventDefault","res","formattedArray","items","catch","err","components_Form","this","components_Results","React","Component","Saved","_this2","App","NavBar","components_Wrapper","react_router","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.41a58640.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst Navbar = () => (\n  <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n    <div className=\"navbar-brand mr-auto gbooks-search\" ><h5>Google Books Search</h5></div>\n    <div className=\"navbar-nav text-white gbooks-link\">\n      <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarTogglerDemo01\" aria-controls=\"navbarTogglerDemo01\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n        <span className=\"navbar-toggler-icon\"></span>\n      </button>\n      <div className=\"collapse navbar-collapse\" id=\"navbarTogglerDemo01\">\n        <ul className=\"navbar-nav mr-auto mt-2 mt-lg-0\">\n          <li className=\"nav-item active\">\n            <Link to=\"/\" className=\"nav-link\">Home</Link>\n          </li>\n          <li className=\"nav-item\">\n            <Link to=\"/saved\" className=\"nav-link\">Saved</Link>\n          </li>\n        </ul>\n      </div>\n    </div>\n  </nav>\n)\n\nexport default Navbar;","import React from \"react\";\n\nfunction Wrapper(props) {\n  return <main className=\"wrapper\" {...props} />;\n}\n\nexport default Wrapper;\n","\nimport React from 'react';\n\nconst Form = (props) => {\n  return (\n    <div className=\"row\">\n      <div className=\"col-lg-12\">\n        <div className=\"card\">\n          <div className=\"card-body\">\n            <form>\n              <div className=\"row m-3\">\n                <div className=\"form-group col-md-10\">\n                <input\n        onChange={props.handleInputChange}\n        value={props.search}\n        name=\"search\"\n        type=\"text\"\n        className=\"form-control\"\n        placeholder=\"Search a Book\"\n        id=\"search\"\n      />\n                </div>\n                <div className=\"form-group col-md-2\">\n                <button onClick={props.handleFormSubmit} className=\"btn btn-dark mt-3 mb-5\">\n        Search\n        </button>\n\n                </div>\n              </div>\n            </form>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Form;\n","import React from 'react';\n\nfunction Results(props) {\n  return (\n    <div className=\"row mb-5\">\n      <div className=\"col-12\">\n        {props.books.map(book => (\n          <div className=\"card mt-4\"\n            key={\n              book._id\n                ? book._id\n                : book.googleId\n            }>\n            <div className=\"card-body\">\n              <h5 className=\"card-title\">{book.title}</h5>\n              <div className=\"media\">\n                <img src={book.image}\n                  className=\"align-self-center mr-3\" alt={book.title} />\n                <div className=\"media-body\">\n                  <h6 className=\"mt-0\">{book.authors}</h6>\n                  <p className=\"mb-0\">{book.description}</p>\n                </div>\n              </div>\n              <a className=\"btn btn-info mr-1 mt-2\" href={book.link} target=\"_blank\"\n                rel=\"noopener noreferrer\">View Book</a>\n              <button className={props.buttonType}\n                onClick={props.buttonAction}\n                id={\n                  book._id\n                    ? book._id\n                    : book.googleId\n                }\n              >\n                {props.buttonText}\n              </button>\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  )\n}\n\nexport default Results;\n","import axios from \"axios\";\n\nexport default {\n  getBooks: function (query) {\n    return axios.get(`https://www.googleapis.com/books/v1/volumes?q=${query}`);\n  },\n  // Deletes the book with the given id\n  deleteBook: function (id) {\n    return axios.delete(\"/api/books/\" + id).then(result => result.data);\n  },\n  // Saves a book to the database\n  saveBook: function (bookData) {\n    return axios.post(\"/api/books\", bookData).then(result => result.data);\n  },\n  // Get the saved a books from the database\n  savedBooks: function () {\n    return axios.get(\"/api/books\").then(result => result.data);\n  }\n};\n","import React from \"react\";\nimport Form from \"../components/Form\";\nimport Results from \"../components/Results\";\nimport API from \"../utils/API\";\n\nconst booksresults = googleApiResults => {\n    const bookArray = [];\n  \n    googleApiResults.map(book => {\n  \n      const formattedBook = {\n        title: book.volumeInfo.title,\n        authors: book.volumeInfo.authors,\n        description: book.volumeInfo.description,\n        googleId: book.id,\n        image: book.volumeInfo.imageLinks.thumbnail,\n        link: book.volumeInfo.canonicalVolumeLink\n      };\n  \n      bookArray.push(formattedBook);\n      return bookArray\n    });\n    return bookArray;\n  };\n  \n  class Search extends React.Component {\n    state = {\n      search: '',\n      results: [],\n      error: ''\n    };\n  \n    saveBook = event => {\n  \n      const chosenBook = this.state.results.find(book => book.googleId === event.target.id);\n  \n      const newSave = {\n        title: chosenBook.title,\n        authors: chosenBook.authors,\n        description: chosenBook.description,\n        googleId: chosenBook.googleId,\n        image: chosenBook.image,\n        link: chosenBook.link\n      };\n  \n      API.saveBook(newSave)\n      console.log(newSave);\n    };\n  \n    \n    handleInputChange = event => {\n        const name = event.target.name;\n        const value = event.target.value;\n        this.setState({\n            [name]: value\n        });\n    };\n  \n    handleFormSubmit = event => {\n      event.preventDefault();\n      API.getBooks(this.state.search)\n        .then(res => {\n          const formattedArray = booksresults(res.data.items);\n          this.setState({results: formattedArray});\n        })\n        .catch(err => console.log(err))\n    };\n  \n    render() {\n      return (\n        <div className=\"container\">\n          \n          <Form\n            handleInputChange={this.handleInputChange}\n            handleFormSubmit={this.handleFormSubmit}\n          />\n          <Results\n            books={this.state.results}\n            buttonAction={this.saveBook}\n            buttonType=\"btn btn-success mt-2\"\n            buttonText=\"Save Book\"\n          />\n        </div>\n      );\n    }\n  }\n  \n  export default Search;","import React, { Component } from \"react\";\nimport API from \"../utils/API\";\nimport Results from \"../components/Results\";\n\nclass Saved extends Component {\n    state = {\n        savedBooks: [],\n    }\n\n    componentDidMount() {\n        API.savedBooks()\n            .then(savedBooks => this.setState({ savedBooks: savedBooks }))\n            .catch(err => console.error(err));\n    }\n\n    render() {\n        return (\n            <div className=\"container\">\n                <h2>Saved books</h2>\n                <Results books={this.state.savedBooks} />\n            </div>\n        )\n    }\n}\n\nexport default Saved;","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport NavBar from \"./components/NavBar\";\n\nimport Wrapper from \"./components/Wrapper\";\n\nimport Search from \"./pages/Search\";\nimport Saved from \"./pages/Saved\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n \n  render() {\n    return (\n      <Router>\n        <div>\n          <NavBar />\n         \n          <Wrapper>\n            <Route exact path=\"/\" component={Search} />\n            <Route exact path=\"/search\" component={Search} />\n            <Route exact path=\"/saved\" component={Saved} />\n          \n          </Wrapper>\n        </div>\n      </Router>\n    )\n  };\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}